package script

import (
	"bufio"
	"fmt"
	"os"
	"regexp"
)

type Todo struct {
	LineNumber int32
	Message    string
	FilePath   string
}
/*** 
todo 1
todo 2
todo 3
*/

/** todo ddjdjdj */

# todo say something
// todo hello world
// FindTodos Open file and find todos
func FindTodos(filePath string) (*[]Todo, error) {

	file, err := os.Open(filePath)

	defer file.Close()

	if err != nil {
		return nil, fmt.Errorf("Could not open file %s: %v", filePath, err)
	}

	scanner := bufio.NewScanner(file)
	scanner.Split(bufio.ScanLines)

	lineNumber := 1

	foundTodos := make([]Todo, 0)

	for scanner.Scan() {
		// find todos in every line
		// ideally, the todo will be inside a comment bloc i.e. // /**/ ///
		findTodo, err := regexp.Match(`((?i)\/\/|#).todo.*`, scanner.Bytes()) ///// todo another todo here

		if err != nil {
			return nil, fmt.Errorf("An error occurred while finding todo: %v", err)
		}

		if findTodo == true {

			todo := Todo{
				LineNumber: int32(lineNumber),
				Message:    scanner.Text(),
				FilePath:   filePath,
			}

			foundTodos = append(foundTodos, todo)

			fmt.Printf("%d: %s\n", lineNumber, scanner.Text())

		}

		lineNumber++
	}

	return &foundTodos, nil
}

// Opts Options for getting files in a directory/subdirectory
type Opts struct {
	RespectGitignore bool
	SkipHiddenFiles  bool
}

// GetFilesInDirectory scan directory and subdirectories, returning all files
// except those that are exempted. Exempted files could be either by an exact match or
// a regex match. Directories can also be exempted.
func GetFilesInDirectory(opts Opts, exempt ...string) ([]string, error) {
	// TODO read all files and directories inside
	// TODO have a list of files to exempt, either by
	// todos: extension, filename or regex pattern
	// todo: for each file, check if there are any todos

	return nil, nil

}

// GetGitingoreFiles find all gitingore files and return files to ignore
func GetGitingoreFiles() ([]string, error) {
	return nil, nil
}
